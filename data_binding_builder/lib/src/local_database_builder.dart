import 'package:build/build.dart';
import 'package:dart_style/dart_style.dart';
import 'package:path/path.dart' as p;

import 'database_description.dart';
import 'string_util.dart';

// Describe the database schema
DatabaseDescription buildDatabaseDescription() {
  var dbDescription = DatabaseDescription(meta: const {
    DatabaseDescription.META_PREPEND_ID_COLUMN: true,
    DatabaseDescription.META_VERSION: 1
  });

  dbDescription.addTableSpecWithFormat(
      name: 'events',
      specFormat: DatabaseDescription.SPEC_FMT_NT,
      specContent: [
        ['experiment_id', SqlLiteDatatype.INTEGER],
        ['experiment_server_id', SqlLiteDatatype.INTEGER],
        ['experiment_name', SqlLiteDatatype.TEXT],
        ['experiment_version', SqlLiteDatatype.INTEGER],
        ['schedule_time', SqlLiteDatatype.INTEGER],
        ['response_time', SqlLiteDatatype.INTEGER],
        ['uploaded', SqlLiteDatatype.INTEGER],
        ['group_name', SqlLiteDatatype.TEXT],
        ['action_trigger_id', SqlLiteDatatype.INTEGER],
        ['action_trigger_spec_id', SqlLiteDatatype.INTEGER],
        ['action_id', SqlLiteDatatype.INTEGER],
      ]);
  dbDescription.addTableSpecWithFormat(
      name: 'outputs',
      specFormat: DatabaseDescription.SPEC_FMT_NTTr,
      specContent: [
        ['event_id', SqlLiteDatatype.INTEGER, '{{event}}.id'],
        ['text', SqlLiteDatatype.TEXT, '{{responses.entry}}.key'],
        ['answer', SqlLiteDatatype.TEXT, '{{responses.entry}}.value']
      ]);
  return dbDescription;
}

/// How-tos
///
/// How to create a table?
String buildSqlCreateTable(
    DatabaseDescription dbDescription, String tableName) {
  var dbColumnSpecs = dbDescription.getDatabaseColumnSpecifications(tableName);
  var prependIdColumn =
      dbDescription.meta[DatabaseDescription.META_PREPEND_ID_COLUMN] ?? false;
  return '''
CREATE TABLE $tableName (
${prependIdColumn ? "_id INTEGER PRIMARY KEY AUTOINCREMENT,\n" : ""}'''
      '''
${dbColumnSpecs.map((dbColumn) => "${dbColumn.name} ${dbColumn.typeAsString}").join(', \n')}
  );
  ''';
}

/// How to get all column fields (of a table) from an object, in a default way?
/// The returned string is the representation of a map that can be used by Database.insert()
String buildDartFieldsMap(
    DatabaseDescription dbDescription, String tableName, String objectName) {
  var dbColumnSpecs = dbDescription.getDatabaseColumnSpecifications(tableName);
  var prependIdColumn =
      dbDescription.meta[DatabaseDescription.META_PREPEND_ID_COLUMN] ?? false;
  if (prependIdColumn == false) {
    throw UnimplementedError();
  }
  // We don't include the column '_id' in the returned map representation because it will be automatically generated by sqlite.
  return '''
{
  ${dbColumnSpecs.map((dbColumn) => "'${dbColumn.name}': ${objectName}.${snakeCaseToCamelCase(dbColumn.name)},").join('\n')}
}
  ''';
}

/// How to get column fields (of a table) using a map specifying template
/// replacement rules, when the table is specified with "translation" templates?
String buildDartFieldsMapWithTranslationTemplate(
    DatabaseDescription dbDescription,
    String tableName,
    Map<String, String> placeholderMap) {
  var dbColumnSpecs = dbDescription.getDatabaseColumnSpecifications(tableName);
  var prependIdColumn =
      dbDescription.meta[DatabaseDescription.META_PREPEND_ID_COLUMN] ?? false;
  if (prependIdColumn == false) {
    throw UnimplementedError();
  }

  return '''
  {
    ${dbColumnSpecs.map((dbColumn) => "'${dbColumn.name}': ${templateFormat(dbColumn.translation, placeholderMap)},").join('\n')}
  }
  ''';
}

/// Dart code builder
class LocalDatabaseBuilder implements Builder {
  static const partOfFilename = 'local_database.dart';
  static const outputFilename = 'local_database.inc.dart';

  static AssetId _output(BuildStep buildStep) {
    return AssetId(
      buildStep.inputId.package,
      p.join('lib', 'storage', outputFilename),
    );
  }

  @override
  Map<String, List<String>> get buildExtensions {
    return const {
      r'$lib$': const ['storage/$outputFilename'],
    };
  }

  @override
  Future<void> build(BuildStep buildStep) async {
    var dbDescription = buildDatabaseDescription();
    var formatter = DartFormatter();
    final content = formatter.format('''
// GENERATED CODE - DO NOT MODIFY BY HAND

part of '$partOfFilename';

var _dbVersion = ${dbDescription.meta[DatabaseDescription.META_VERSION]};

Future<void> _onCreate(Database db, int version) async {
${dbDescription.tableNames.map((tableName) => 'await db.execute(\'\'\'${buildSqlCreateTable(dbDescription, tableName)}\'\'\');').join('\n')}
}

Future<void> _insertEvent(Database db, Event event) async {
  try {
    db.transaction((txn) async {
      event.id = await txn.insert(
      'events',
      ${buildDartFieldsMap(dbDescription, 'events', 'event')},
      conflictAlgorithm: ConflictAlgorithm.replace,
      );
      var batch = txn.batch();
      for (var entry in event.responses.entries) {
        batch.insert('outputs', 
        ${buildDartFieldsMapWithTranslationTemplate(dbDescription, 'outputs', {
      'event': 'event',
      'responses.entry': 'entry'
    })},
        conflictAlgorithm: ConflictAlgorithm.replace,
        );
      }
      await batch.commit(noResult: true);
    });
  } catch (e) {
    event.id = null;
    rethrow;
  }
}

    ''');

    final output = _output(buildStep);
    await buildStep.writeAsString(output, content);
  }
}
